$ cd ot-br-posix
$ ./script/bootstrap
$ INFRA_IF_NAME=wlan0 ./script/setup
 
INFRA_IF_NAME=eth0 ./script/setup
 
sudo service otbr-agent status
sudo service otbr-agent restart
 
 
sudo ot-ctl dataset init new
sudo ot-ctl dataset commit active
sudo ot-ctl ifconfig up
sudo ot-ctl thread start
sudo ot-ctl state
sudo ot-ctl dataset active -x

parse QR code :
./chip-tool payload parse-setup-payload MT:8IXS142C00KA0648G00
 
start bluetooth on nordic 
	an giu button 4  tren mach nordic
	button 2: 
	button1: 
	button 3:
 
./chip-tool pairing ble-thread 10 hex:0e080000000000010000000300000e35060004001fffe00208c6338cb46dccdbbf0708fdeacc727788632e05104c137c0d982c5c9c833b2b03b61f7d1e030f4f70656e5468726561642d653638350102e6850410ae5d9e8c77374b90072a17db098106610c0402a0f7f8 20202021 3840
 
change doorlock
 
./chip-tool doorlock lock-door 10 1 --timedInteractionTimeoutMs 1000
./chip-tool doorlock unlock-door 10 1 --timedInteractionTimeoutMs 1000
 
============================================ OTA over matter =============
OTA : 
reference : https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/matter/nrfconnect_examples_software_update.html
https://developers.home.google.com/matter/ota/test/vendors/nordic-semiconductor
https://community.silabs.com/s/article/Matter-Software-Update-Over-The-Air?language=en_US
 
| build matter ota provider|  -> |  flash boot load and firm foe nrf | ->
 
 
theory:
OTA Provider - This is a node that can respond to the OTA Requestorsâ€™ queries about available software updates and share the update packages with them.
 
OTA Requestor - This is any node that needs to be updated and can communicate with the OTA Provider to fetch applicable software updates.
 
Step1: Navigate to the CHIP root directory.
	cd ~/connectedhomeip
 
Step2: Build the OTA Provider application for Linux:
 
	scripts/examples/gn_build_example.sh examples/ota-provider-app/linux out/provider chip_config_network_layer_ble=false
 
Step3: Build chip-tool for Linux: (build previous)
 
	scripts/examples/gn_build_example.sh examples/chip-tool out/chiptool 'chip_mdns="platform"'
 
Step4: copy matter.ota (this file is automatically created when build matter in Zephyr folder) to connectedhomeip/ota_firmware
 
Step5: run ota provider app with matter.ota firm 
	out/provider/chip-ota-provider-app -f ota_firmware/matter.ota
Step6: commission Ota provider to network 
	./chip-tool pairing onnetwork 1 20202021
Step7: create thread network and commission matter device to matter network 
	./chip-tool pairing ble-thread 11 hex:0e080000000000010000000300001535060004001fffe002087f2cbc5821b6d9170708fd39bcc20323d48105109b2971a486b560b8b7e24c2107c226c8030f4f70656e5468726561642d653662370102e6b70410b13bc7962fa44f987c6f00f6b3bc087b0c0402a0f7f8 20202021 3840
Step8: config matter device to  ota provider 
	./chip-tool otasoftwareupdaterequestor write default-otaproviders '[{"fabricIndex": 1, "providerNodeID": 1, "endpoint": 0}]' 2 0
Step9: Configure the OTA Provider with the access control list (ACL) that grants Operate privileges to all nodes in the fabric. This is necessary to allow the nodes to send cluster commands to the OTA Provider:
	./chip-tool accesscontrol write acl '[{"fabricIndex": 1, "privilege": 5, "authMode": 2, "subjects": [112233], "targets": null}, {"fabricIndex": 1, "privilege": 3, "authMode": 2, "subjects": null, "targets": null}]' 1 0
Step10: Initiate the DFU procedure in one of the following ways:
	*If you have built the device firmware with -DCONFIG_CHIP_LIB_SHELL=y option, which enables Matter shell commands, run the following command on the device shell:
		matter ota query
	*Otherwise, use chip-tool to send the Announce OTA Provider command to the device (the numeric arguments are Provider Node ID, Provider Vendor ID, Announcement Reason, Provider Endpoint ID, Requestor Node ID and Requestor Endpoint ID, respectively):
		./chip-tool otasoftwareupdaterequestor announce-otaprovider 1 0 0 0 2 0
 
 
Note: update version forfirmware : https://developers.home.google.com/matter/ota/test/vendors/nordic-semiconductor
 
 
sua trong file .config cua out config 
============ this way have issuse =================
python E:\ncs\v2.5.0\modules\lib\matter\src\app\ota_image_tool.py show  zephyr.bin
python E:\ncs\v2.5.0\modules\lib\matter\src\app\ota_image_tool.py create -v 0xfff1 -p 0x8006 -vn 0x01 -vs "prerelease" E:\nordict\nr_wp\lock\build\zephyr\zephyr.bin -da sha256 test.ota